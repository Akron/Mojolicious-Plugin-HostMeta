=pod

=head1 NAME

Mojolicious::Plugin::HostMeta - Serve and Retrieve Host-Meta documents

=head1 SYNOPSIS

  # Mojolicious
  $self->plugin('HostMeta');

  # Mojolicious::Lite
  plugin 'HostMeta';

  # In Controllers
  print $self->hostmeta('gmail.com')->link('lrrd');

  print $self->endpoint('host-meta');

=head1 DESCRIPTION

L<Mojolicious::Plugin::HostMeta> is a Mojolicious plugin to serve and
retrieve "well-known" L<Host-Meta|https://tools.ietf.org/html/rfc6415>
documents.


=head1 METHODS

=head2 C<register>

  # Mojolicious
  $app->plugin('HostMeta' => {
    expires => 100
  });

  # Mojolicious::Lite
  plugin 'HostMeta';

Called when registering the plugin.
Accepts one optional parameter C<expires>, which is the number
of seconds the served host-meta should be cached.
Defaults to 10 days.


=head1 HELPERS

=head2 C<hostmeta>

  # In Controller:
  my $xrd = $self->hostmeta;
  $xrd = $self->hostmeta('gmail.com');
  $xrd = $self->hostmeta('sojolicio.us' => {
    rel => 'hub'
  });
  $xrd = $self->hostmeta('gmail.com', -secure);

This helper returns host-meta documents
as L<XML::Loy::XRD> objects with the
L<XML::Loy::HostMeta> extension.

If no host is given, the local host-meta document is returned.
If a hostname is given, the corresponding host-meta document
is retrieved from the host and returned.
In that case an additional hash reference is accepted.
It may include a C<rel> parameter
(see the L<WebFinger|http://tools.ietf.org/html/draft-ietf-appsawg-webfinger>
specification for further explanation)
and may include a C<resource> parameter, which will be passed
to L<WebFinger|Mojolicious::Plugin::WebFinger> if this plugin
is installed.

An additional C<-secure> flag indicates, that discovery is allowed
only over C<https> without redirections.


=head1 ROUTES

The route C</.well-known/host-meta> is established and serves
the host's own host-meta document.
An L<endpoint|Mojolicious::Plugin::Util::Endpoint> called
C<host-meta> is established.


=head1 CALLBACKS

=head2 hostmeta_fetch

  # Establish a callback
  $mojo->callback(
    hostmeta_fetch => sub {
      my ($c, $host) = @_;

      my $doc = $c->chi->get('hostmeta-' . $host);
      return unless $doc;

      # Return document
      return $c->new_xrd($doc);
    }
  );

This callback is released before a host-meta document
is retrieved from a foreign server. The parameters passed to the
callback include the current controller object and the host's
name.

If a L<XML::Loy::XRD> document associated with the requested
host name is returned, the retrieval will stop.

The callback can be established with the
L<callback|Mojolicious::Plugin::Util::Callback/callback>
helper or on registration.

This can be used for caching.

=head1 HOOKS

=head2 prepare_hostmeta

  $mojo->hook(prepare_hostmeta => sub {
    my $c = shift;
    my $hostmeta = shift;
    $hostmeta->link(permanent => '/perma.html');
  };

This hook is run when the host's own host-meta document is
first prepared. The hook passes the current controller
object and the host-meta document as an L<XML::Loy::XRD> object.
This hook is only emitted once for each subscriber.


=head2 before_serving_hostmeta

  $mojo->hook('before_serving_hostmeta' => sub {
    my $c = shift;
    my $hostmeta = shift;
    $hostmeta->link(lrdd => './well-known/host-meta');
  };

This hook is run before the host's own host-meta document is
served. The hook passes the current controller object and
the host-meta document as an L<XML::Loy::XRD> object.


=head2 after_fetching_hostmeta

  $mojo->hook(
    after_fetching_hostmeta => sub {
      my ($c, $host, $xrd, $headers) = @_;

      # Store in cache
      $c->chi->set('hostmeta-' . $host => $xrd->to_xml);
    }
  );

This hook is run after a foreign host-meta document is newly fetched.
The parameters passed to the hook are the current controller object,
the host name, the XRD document as an L<XML::Loy::XRD> object
and the L<headers|Mojo::Headers> object of the response.

This hook is not released after a successful LRDD resource request.

This can be used for caching.


=head1 DEPENDENCIES

L<Mojolicious> (best with SSL support),
L<Mojolicious::Plugin::Util::Endpoint>,
L<Mojolicious::Plugin::Util::Callback>,
L<Mojolicious::Plugin::XRD>.


=head1 AVAILABILITY

  https://github.com/Akron/Mojolicious-Plugin-HostMeta


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011-2013, L<Nils Diewald|http://nils-diewald.de/>.

This program is free software, you can redistribute it
and/or modify it under the same terms as Perl.

=cut
